package com.Tesis.bicycle;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;


import static org.junit.Assert.*;

import android.location.Location;
import android.location.LocationManager;

import com.Tesis.bicycle.Model.Tracking;

import java.util.ArrayList;
import java.util.List;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */

public class ExampleUnitTest {

    private Tracking tracking;

    @Before
    public void setUp() {
        tracking = new Tracking();
    }

    @Test
    public void testAddTracking() {
        List<Location> locationList = new ArrayList<>();

        String[] data = { "-59.1254659 -37.3236944,3.9,0.63722456",
                "-59.1254277 -37.3237398,5.36,3.4720583",
                "-59.1253602 -37.323907,10.856,3.4557488",
                "-59.1253473 -37.3240434,12.158,2.9634593",
                "-59.125432 -37.3241603,43.795,2.7815866",
                "-59.1256755 -37.3243189,25.461,1.7602602",
                "-59.126199 -37.3247954,13.936,4.01998",
                "-59.1265639 -37.3248086,9.648,2.5952408",
                "-59.1266928 -37.3247137,48.23,2.537666",
                "-59.1268546 -37.3243651,10.72,4.788378",
                "-59.1271173 -37.324031,8.576,4.7916546",
                "-59.1273252 -37.3237197,9.648,5.8593717",
                "-59.1275119 -37.3233047,8.576,6.0183253",
                "-59.1277163 -37.3229964,8.576,3.5877845",
                "-59.1277695 -37.3229123,14.841,2.940802",
                "-59.127768 -37.3228973,16.013,2.9519536",
                "-59.1279835 -37.3225111,15.829,7.2464695",
                "-59.1280991 -37.3223137,11.847,6.06138",
                "-59.1281803 -37.322195,13.858,3.8015194",
                "-59.1282693 -37.3221419,16.37,2.0970738",
                "-59.1283213 -37.3220964,19.15,1.8691038",
                "-59.1283891 -37.3220518,14.936,1.4401453",
                "-59.1284219 -37.3220175,13.317,1.4018912",
                "-59.1284473 -37.3219869,16.283,1.3897976",
                "-59.1284841 -37.3219103,22.375,1.7188556",
                "-59.1286709 -37.3215,23.343,2.441071",
                "-59.1287377 -37.3213589,15.049,2.2903998",
                "-59.1288071 -37.3211979,14.488,4.268021",
                "-59.1288988 -37.3209455,14.157,4.6576686",
                "-59.1289252 -37.3208636,15.635,4.653203",
                "-59.1290236 -37.320666,14.255,3.8310075",
                "-59.1290561 -37.3206069,14.465,3.7956288",
                "-59.129128 -37.3205147,15.668,3.3523471",
                "-59.1291394 -37.32041,14.573,3.2842178",
                "-59.1291643 -37.3203553,15.797,3.2915735",
                "-59.1293363 -37.3202057,16.742,5.2008657",
                "-59.129389 -37.3201689,18.293,2.0190327",
                "-59.1293509 -37.32009,15.561,1.7213911",
                "-59.1293655 -37.320049,14.742,1.7187417",
                "-59.1294037 -37.3200011,18.636,2.0592203",
                "-59.1294726 -37.3199348,25.716,2.5595074",
                "-59.1296943 -37.3196996,26.949,3.345603",
                "-59.1298256 -37.3195265,18.74,2.7805364",
                "-59.1298405 -37.3194715,17.344,2.7708454",
                "-59.1299095 -37.3194735,13.976,1.121958",
                "-59.12995 -37.3194671,10.668,1.1175",
                "-59.1299718 -37.3194511,12.653,0.664229",
                "-59.1299845 -37.3194507,13.432,0.4024088",
                "-59.130189 -37.3194337,15.898,1.9698489",
                "-59.1302732 -37.3194338,18.725,1.9767146",
                "-59.1305385 -37.3195418,17.425,3.8513181",
                "-59.1307277 -37.3196306,15.322,4.847118",
                "-59.130846 -37.3197019,14.839,0.5035736",
                "-59.1308886 -37.319741,14.36,0.33331782",
                "-59.1309124 -37.3197339,15.149,0.3744692",
                "-59.1308719 -37.3197245,18.303,0.008951276",
                "-59.1308517 -37.3197002,13.987,6.319658E-5",
                "-59.1308541 -37.3196966,13.56,8.057602E-4",
                "-59.1309282 -37.3197223,15.707,1.9022391",
                "-59.1310182 -37.319754,16.485,3.3283806",
                "-59.1310942 -37.3197897,18.415,3.8058655",
                "-59.1315239 -37.3198904,16.454,4.5406165",
                "-59.1316303 -37.319903,12.998,4.481452",
                "-59.1315889 -37.3199234,16.094,0.48689505",
                "-59.1315367 -37.3199151,17.461,1.005389",
                "-59.1320192 -37.3201364,16.171,2.0419447",
                "-59.1321117 -37.3201717,14.918,2.0125744",
                "-59.1321111 -37.3202029,13.829,0.15230629",
                "-59.1321117 -37.3201827,12.017,0.34387606",
                "-59.1321464 -37.3201264,9.648,0.598055",
                "-59.1321818 -37.32011,6.432,0.3717169",
                "-59.1321633 -37.3201027,8.069,0.21039395",
                "-59.1321674 -37.3201025,8.403,1.902789",
                "-59.1321767 -37.3200986,8.28,0.14656147",
                "-59.1321983 -37.3200966,9.782,0.61629266",
                "-59.1324107 -37.3202081,10.582,1.7362959",
                "-59.1324519 -37.3202447,10.234,1.728341",
                "-59.1324966 -37.3202946,13.51,1.525088",
                "-59.132511 -37.3203065,18.942,0.6839346",
                "-59.1330337 -37.3205719,18.786,2.5314102",
                "-59.1331818 -37.3206441,17.71,2.4952962",
                "-59.1333809 -37.3207352,18.146,4.279929",
                "-59.1335902 -37.3208211,17.206,5.2999735",
                "-59.1342847 -37.3211281,10.72,4.5490713",
                "-59.1344524 -37.3211488,27.806,4.4183745",
                "-59.1345236 -37.3211411,31.46,3.2602196",
                "-59.1347247 -37.321216,28.31,5.0027027",
                "-59.1348521 -37.3212585,22.142,5.0550942",
                "-59.1350358 -37.3213774,21.45,3.9591455",
                "-59.1351273 -37.3214406,19.965,3.9030523",
                "-59.1353488 -37.3214337,18.801,3.5850484",
                "-59.1355188 -37.3214371,13.42,3.533729",
                "-59.1355655 -37.321448,12.172,3.5074124",
                "-59.1355884 -37.321478,13.119,0.058534168",
                "-59.1355566 -37.3214726,12.243,0.027089147",
                "-59.1355417 -37.3214759,12.286,0.02476261",
                "-59.1355344 -37.3214833,11.042,0.15820774",
                "-59.1355307 -37.3215041,11.652,0.2631785",
                "-59.1355308 -37.321498,46.045,0.007886918",
                "-59.13552 -37.3215229,11.299,0.4442351",
                "-59.1355444 -37.3215149,11.271,3.0288231",
                "-59.1355574 -37.3215355,11.641,0.5124687",
                "-59.1355671 -37.3215496,15.975,0.59642744",
                "-59.135723 -37.3216269,17.856,2.688792",
                "-59.1360548 -37.3217343,15.703,6.6762805",
                "-59.1362836 -37.3218101,16.007,5.7884707",
                "-59.1363799 -37.3218462,16.8,5.084213",
                "-59.1371589 -37.3221157,9.648,5.80357",
                "-59.1375595 -37.3223048,11.792,5.572086",
                "-59.1379957 -37.3224211,5.36,5.3544974",
                "-59.1387012 -37.3226624,9.648,5.274557",
                "-59.139148 -37.3227563,7.504,2.3113508",
                "-59.1393152 -37.3228199,25.611,2.6588397",
                "-59.1394672 -37.3229557,26.125,3.879346",
                "-59.1396127 -37.3230439,22.109,3.6257904",
                "-59.1397677 -37.32307,18.226,3.1554577",
                "-59.1399923 -37.3231082,16.597,2.3517957",
                "-59.1400851 -37.3231338,16.427,2.131271",
                "-59.1401195 -37.323145,17.608,2.0497134",
                "-59.1401749 -37.3231908,16.509,1.3796172",
                "-59.1402257 -37.3232148,32.217,1.4612683",
                "-59.1402813 -37.323247,50.01,1.699248",
                "-59.1403486 -37.3235013,36.173,1.1045808",
                "-59.1403898 -37.3235913,21.787,1.0197656",
                "-59.1407743 -37.3235605,20.385,1.0596784",
                "-59.1411076 -37.323518,16.901,0.98684186",
                "-59.1412515 -37.3235456,17.163,0.9837804"
        };

        for (String item : data) {
            String[] parts = item.split(",");
            String[] coordinates = parts[0].split(" ");
            double longitude = Double.parseDouble(coordinates[0]);
            double latitude = Double.parseDouble(coordinates[1]);
            float accuracy = Float.parseFloat(parts[1]);
            float speed = Float.parseFloat(parts[2]);
            Location location = new MockLocation("");
            location.setLongitude(longitude);
            location.setLatitude(latitude);
            location.setAccuracy(accuracy);
            location.setSpeed(speed);

//            Location mockLocation = Mockito.mock(Location.class);
//
//
//            Mockito.when(mockLocation.getLongitude()).thenReturn(longitude);
//            Mockito.when(mockLocation.getLatitude()).thenReturn(latitude);
//            Mockito.when(mockLocation.getAccuracy()).thenReturn(accuracy);
//            Mockito.when(mockLocation.getSpeed()).thenReturn(speed);
//
//            // Obtiene los valores de los mocks y los imprime
//            double mockLongitude = mockLocation.getLongitude();
//            double mockLatitude = mockLocation.getLatitude();
//            float mockAccuracy = mockLocation.getAccuracy();
//            float mockSpeed = mockLocation.getSpeed();


            locationList.add(location);
        }
        for(Location l:locationList){
            // Agrega la ubicaci√≥n al Tracking
            tracking.addTracking(l);
        }

        // Obtiene los puntos filtrados (filteredPoints) y los puntos originales (points)
        List<Location> filteredPoints = tracking.getFilteredPoints();
        List<Location> points = tracking.getPoints();


        // Puedes imprimir los datos de filteredPoints y points para verificar que sean correctos
        System.out.println("filteredPoints: " + filteredPoints);
        System.out.println("points: " + points);

        for(Location l:filteredPoints){
            // Agrega la ubicaci√≥n al Tracking
            double mockLongitude = l.getLongitude();
            double mockLatitude = l.getLatitude();
            float mockAccuracy = l.getAccuracy();
            float mockSpeed = l.getSpeed();

            System.out.println("POINT("+l.getLongitude()+" "+l.getLatitude()+")"+","+"acc: "+l.getAccuracy()+" veloc: "+l.getSpeed()+"\n");
        }

    }

}